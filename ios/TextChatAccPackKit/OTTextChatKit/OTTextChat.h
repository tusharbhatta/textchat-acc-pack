//
//  OTTextChat.h
//
//  Copyright Â© 2016 Tokbox, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "OTAcceleratorSession.h"
#import "OTTextMessage.h"

/**
 *  @typedef  TextChatViewEventSignal                  NS_ENUM for the signal generated by the text chat.
 *  @brief    this enum describes the types for event signals send by the text chat
 *  @constant TextChatViewEventSignalDidSendMessage    The component sent a message.
 *  @constant TextChatViewEventSignalDidReceiveMessage The component received a new message.
 *  @constant TextChatViewEventSignalDidConnect        A disconnect was requested and succeeded.
 *  @constant TextChatViewEventSignalDidDisconnect     A new connection was requested and succeeded.
 */
typedef NS_ENUM(NSUInteger, OTTextChatViewEventSignal) {
    OTTextChatViewEventSignalDidSendMessage = 0,
    OTTextChatViewEventSignalDidReceiveMessage,
    OTTextChatViewEventSignalDidConnect,
    OTTextChatViewEventSignalDidDisconnect
};

/**
 *  TextChatViewEventBlock type for the various TextChatViewEventSignal signals.
 *
 *  @param signal   NS_ENUM send with one of the signal defined for TextChatViewEventSignal
 *  @param textChat The current message sent or received.
 *  @param error    The error object indicating there is a problem when sending the signal.
 */
typedef void (^OTTextChatViewEventBlock)(OTTextChatViewEventSignal signal, OTTextMessage *textChat, NSError *w);

@class OTTextChat;
@class OTTextChatViewController;

@protocol OTTextChatDataSource <NSObject>
- (OTAcceleratorSession *)sessionOfOTTextChat:(OTTextChat *)textChat;
@end

/**
 *  The delegate of a TextChatView object must confirm to the TextChatViewDelegate protocol.
 *  Optional methods of the protocol allow the delegate to notify the connectivity.
 */
@protocol OTTextChatViewDelegate <NSObject>

/**
 *  Notifies the delegate that the text chat view finished sending the message, with or without an error.
 *
 *  @param textChat The text chat message object.
 *  @param error An error object, used by the text chat view, when there is an error sending a message.
 */
- (void)didSendTextMessage:(OTTextMessage *)textChat
                     error:(NSError *)error;

/**
 *  Notifies the delegate that the text chat view finished receiving the message, with or without an error.
 *
 *  @param textChat The text chat message object.
 *  @param error An error object, used by the text chat view, when there is an error receiving a message.
 */
- (void)didReceiveTextMessage:(OTTextMessage *)textChat
                        error:(NSError *)error;

/**
 *  Notifies the delegate the text chat view has established a text chat connection, with or without an error.
 *
 *  @param error An error object. It can contain information related to a connection error, a nil value,
 *               or information indicating a successful connection.
 */
- (void)didConnectWithError:(NSError *)error;

/**
 *  Notifies the delegate that the text chat view has stopped a text chat connection, with or without an error.
 *
 *  @param error An error object. It can contain information related to a disconnect error, a nil value,
 *               or information indicating a connection was successfully closed.
 */
- (void)didDisConnectWithError:(NSError *)error;
@end

@interface OTTextChat : NSObject

/**
 *  The object that acts as the data source of the text chat.
 *
 *  The delegate must adopt the OTTextChatDataSource protocol. The delegate is not retained.
 */
@property (weak, nonatomic) id<OTTextChatDataSource> dataSource;

/**
 *  The object that acts as the delegate of the text chat view.
 *
 *  The delegate must adopt the TextChatViewDelegate protocol. The delegate is not retained.
 */
@property (weak, nonatomic) id<OTTextChatViewDelegate> delegate;

/**
 *  @return Returns an initialized text chat view object.
 */
- (instancetype)initWithDataSource:(id<OTTextChatDataSource>)dataSource;

/**
 *  Establishes a text chat connection.
 */
- (void)connect;

/**
 *  Establishes a text chat connection with completion.
 *
 *  @param handler NS_ENUM for the various event signals.
 */
- (void)connectWithHandler:(OTTextChatViewEventBlock)handler;

/**
 *  Stops a text chat connection.
 */
- (void)disconnect;

/**
 *  The name of the sender.
 */
@property (nonatomic) NSString *alias;

/**
 *  The name of the receiver.
 */
@property (readonly, nonatomic) NSString *receiverAlias;

/**
 *  The identifier of a connection object from OpenTok.
 */
@property (readonly, nonatomic) NSString *connectionId;

/**
 *  Attempt to send the message to another connection
 *
 *  @param message The message attempted to send.
 */
- (void)sendMessage:(NSString *)message;

@end
